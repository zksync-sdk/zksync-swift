// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios13.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZKSyncCrypto
import Foundation
import Swift
@_exported import ZKSyncCrypto
@objc @_inheritsConvenienceInitializers public class ZKSyncCrypto : ObjectiveC.NSObject {
  public static func generatePrivateKey(seed: Foundation.Data) -> Swift.Result<ZKSyncCrypto.ZKPrivateKey, ZKSyncCrypto.ZKSyncCryptoError>
  public static func getPublicKey(privateKey: ZKSyncCrypto.ZKPrivateKey) -> Swift.Result<ZKSyncCrypto.ZKPackedPublicKey, ZKSyncCrypto.ZKSyncCryptoError>
  public static func getPublicKeyHash(publicKey: ZKSyncCrypto.ZKPackedPublicKey) -> Swift.Result<ZKSyncCrypto.ZKPublicHash, ZKSyncCrypto.ZKSyncCryptoError>
  public static func signMessage(privateKey: ZKSyncCrypto.ZKPrivateKey, message: Swift.String) -> Swift.Result<ZKSyncCrypto.ZKSignature, ZKSyncCrypto.ZKSyncCryptoError>
  public static func signMessage(privateKey: ZKSyncCrypto.ZKPrivateKey, message: Foundation.Data) -> Swift.Result<ZKSyncCrypto.ZKSignature, ZKSyncCrypto.ZKSyncCryptoError>
  public static func rescueHashOrders(message: Foundation.Data) -> ZKSyncCrypto.ZKResqueHash
  @objc deinit
  @objc override dynamic public init()
}
public class ZKPrimitive {
  public init(_ content: Foundation.Data)
  convenience public init(_ content: [Swift.UInt8])
  public func data() -> Foundation.Data
  public func base64String() -> Swift.String
  public func hexEncodedString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZKPackedPublicKey : ZKSyncCrypto.ZKPrimitive {
  override public init(_ content: Foundation.Data)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZKPrivateKey : ZKSyncCrypto.ZKPrimitive {
  public class var bytesLength: Swift.Int {
    get
  }
  override public init(_ content: Foundation.Data)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZKPublicHash : ZKSyncCrypto.ZKPrimitive {
  override public init(_ content: Foundation.Data)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZKSignature : ZKSyncCrypto.ZKPrimitive {
  override public init(_ content: Foundation.Data)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZKResqueHash : ZKSyncCrypto.ZKPrimitive {
  override public init(_ content: Foundation.Data)
  @objc deinit
}
public enum ZKSyncCryptoError : Swift.Error {
  case musigTooLongError
  case seedTooShortError
  case unsupportedOperation
  public static func == (a: ZKSyncCrypto.ZKSyncCryptoError, b: ZKSyncCrypto.ZKSyncCryptoError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias CLibZksPrivateKey = ZKSyncCrypto.ZksPrivateKey
public typealias CLibZksPackedPublicKey = ZKSyncCrypto.ZksPackedPublicKey
public typealias CLibZksPubkeyHash = ZKSyncCrypto.ZksPubkeyHash
public typealias CLibZksSignature = ZKSyncCrypto.ZksSignature
public typealias CLibZksResqueHash = ZKSyncCrypto.ZksResqueHash
extension ZKSyncCrypto.ZKSyncCryptoError : Swift.Equatable {}
extension ZKSyncCrypto.ZKSyncCryptoError : Swift.Hashable {}
