#ifndef ZKS_CRYPTO_H
#define ZKS_CRYPTO_H

/* Generated with cbindgen:0.14.3 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>


/**
 * Maximum byte length of the message that can be signed.
 */
#define MAX_SIGNED_MESSAGE_LEN 92

/**
 * Byte length of the signature. Signature contains r and s points.
 */
#define PACKED_SIGNATURE_LEN 64

/**
 * Byte length of the private key
 */
#define PRIVATE_KEY_LEN 32

/**
 * Byte length of the public key hash
 */
#define PUBKEY_HASH_LEN 20

/**
 * Byte length of the public key
 */
#define PUBLIC_KEY_LEN 32

typedef enum MUSIG_SIGN_RES {
  MUSIG_SIGN_OK = 0,
  MUSIG_SIGN_MSG_TOO_LONG,
} MUSIG_SIGN_RES;

typedef enum PRIVATE_KEY_FROM_SEED_RES {
  PRIVATE_KEY_FROM_SEED_OK = 0,
  /**
   * Seed should be at least 32 bytes long
   */
  PRIVATE_KEY_FROM_SEED_SEED_TOO_SHORT,
} PRIVATE_KEY_FROM_SEED_RES;

typedef enum PUBKEY_HASH_FROM_PUBKEY_RES {
  PUBKEY_HASH_FROM_PUBKEY_OK = 0,
} PUBKEY_HASH_FROM_PUBKEY_RES;

typedef enum PUBLIC_KEY_FROM_PRIVATE_RES {
  PUBLIC_KEY_FROM_PRIVATE_OK = 0,
} PUBLIC_KEY_FROM_PRIVATE_RES;

typedef struct ZksPrivateKey {
  uint8_t data[PRIVATE_KEY_LEN];
} ZksPrivateKey;

typedef struct ZksPackedPublicKey {
  uint8_t data[PUBLIC_KEY_LEN];
} ZksPackedPublicKey;

typedef struct ZksPubkeyHash {
  uint8_t data[PUBKEY_HASH_LEN];
} ZksPubkeyHash;

typedef struct ZksSignature {
  uint8_t data[PACKED_SIGNATURE_LEN];
} ZksSignature;

/**
 * Initializes thread local storage of the parameters used for calculations.
 * Calling this before other calls is optional since parameters will be initialized when needed.
 * Can save time for the first call of other functions in the thread
 * since it takes time to init parameters.
 */
void zks_crypto_init(void);

PRIVATE_KEY_FROM_SEED_RES zks_crypto_private_key_from_seed(const uint8_t *seed,
                                                           size_t seed_len,
                                                           ZksPrivateKey *private_key);

PUBLIC_KEY_FROM_PRIVATE_RES zks_crypto_private_key_to_public_key(const ZksPrivateKey *private_key,
                                                                 ZksPackedPublicKey *public_key);

PUBKEY_HASH_FROM_PUBKEY_RES zks_crypto_public_key_to_pubkey_hash(const ZksPackedPublicKey *public_key,
                                                                 ZksPubkeyHash *pubkey_hash);

/**
 * We use musig Schnorr signature scheme.
 * It is impossible to restore signer for signature, that is why we provide public key of the signer
 * along with signature.
 * [0..32] - packed r point of the signature.
 * [32..64] - s point of the signature.
 */
MUSIG_SIGN_RES zks_crypto_sign_musig(const ZksPrivateKey *private_key,
                                     const uint8_t *msg,
                                     size_t msg_len,
                                     ZksSignature *signature_output);

#endif /* ZKS_CRYPTO_H */
